//Timer module that ticks once per second
module timer (Clock, Reset_n, tc);
	parameter n = 26;
	
	input Clock, Reset_n;
	reg [n-1:0] Q;
	output reg tc; //terminal count, used to trigger next counter
		
	always @(posedge Clock) //reset after 0.5 second
		begin
		if (Q == 26'd25000000) 
				begin
				Q <= 1'd0;
				tc <= 1'b1;
				end
			else
				begin
				Q <= Q + 1'b1;
				tc <= 1'b0;
				end
		end
endmodule

//Counter module that counts up to 6
module counter (Clock, Enable, Reset_n, Q);
	parameter n = 3; //bit width of Q
	
	input Clock, Enable, Reset_n;
	output reg [n-1:0] Q;
		
	always @(posedge Clock) //reset when at 9
		begin
			if (Q == 3'b110) 
				Q <= 1'd0;
			else if (Enable)
				Q <= Q + 1'b1;
		end
endmodule